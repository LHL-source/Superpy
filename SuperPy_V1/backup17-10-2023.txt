backup:17-10-2023 16.28 u
super.py
# Imports
import argparse
import csv
import datetime
from datetime import date
from datetime import datetime
from datetime import timedelta

from functions import date_type
#import datetime

# Do not change these lines.
__winc_id__ = "a2bc36ea784242e4989deb157d527ba0"
__human_name__ = "superpy"


# Your code below this line.
#find current day with fomate:year-month-day
#current_day=date.today()
#print(current_day)

#currentday plus two days works ? yes

#currentDay_plus2Day =current_day +timedelta(2)
#print('currentDay_plus2Day:',currentDay_plus2Day) #w?y


#hieronder:module argparse NO subparser w??? yesss good job
#voorbeeld:python super.py --advance-time 2
#parser=argparse.ArgumentParser(description="Superpy Supermarket Inventory")
#parser.add_argument('--advance_time_2',type=int, help="for advanced time 2 days ,please type:2")
#args=parser.parse_args()
#print("args.advance_time_2",args.advance_time_2)#w? yes good job


#hieronder :module argparse/for buy# w?yes
#here under define the parser and subparser
#parser=argparse.ArgumentParser(description="Superpy Supermarket Inventory")
#subparser=parser.add_subparsers(dest='command')

#here under define the subparser for "buy" r. 32 until r.35 works?yes good job 
#buy_parser=subparser.add_parser("buy")
#buy_parser.add_argument("--product_name", type=str, help="give the name of the product choice:apple, banana, manderin")
#buy_parser.add_argument("--price", type=float, help="give the price of the product for example: 0.5")
#buy_parser.add_argument("--expiration_date", type=date_type, help="Enter the expiredate in 'year-month-day'format")
#args = parser.parse_args()

#print('args.command: ',args.command)#w?y
#print('args.product_name: ',args.product_name)#w?y
#print('args.price: ',args.price)#w?y
#print('args.expiration_date: ',args.expiration_date)#w?y



def main():
    pass
xxx end  backup:17-10-2023 16.28 u xxx

if __name__ == "__main__":
    main()

xxx endxxx
backup here under of 19-10-2023 9.30 u only for sub-parser=sell #w?yes well done
#hieronder:module argparse/for sub-parser=sell #w ?yes gooooood job
#define parser and subparser:
#parser=argparse.ArgumentParser(description="Superpy Supermarket Inventory")
#subparser=parser.add_subparsers(dest='command')

#here under define the subparser for "sell"
#sell_parser=subparser.add_parser("sell")
#sell_parser.add_argument("--product_name", type=str, help="give the name of the product choice:apple, banana, manderin")
#sell_parser.add_argument("--price", type=float, help="give the price of the product for example: 0.7")
#args = parser.parse_args()

##print('args.command: ',args.command)#w?
#print('args.product_name: ',args.product_name)#w?
#print('args.price: ',args.price)#w?y
xxx end xxx
hieronder willikeurige backup op 19-10-2023 22.46 u
#report_parser.add_argument("inventory_revenue_profit", type=str, choices=["inventory", "revenue", "profit"])
#report_parser.add_argument("when", type=str, choices=["for inventory choose:yesterday or now, for revenue choose:???"])
xx end xx

backup 20-10-2023 10.18 u
# Imports
import argparse
import csv
import datetime
from datetime import date
from datetime import datetime
from datetime import timedelta

from functions import date_type
#import datetime

# Do not change these lines.
__winc_id__ = "a2bc36ea784242e4989deb157d527ba0"
__human_name__ = "superpy"


# Your code below this line.

#hieronder :sub-parse:report #w?????
parser=argparse.ArgumentParser(description="Superpy Supermarket Inventory")
#wat de gebruiker als sumcommand heeft ingevulde keuze:buy, sell , report komt als value in attribute command
subparser=parser.add_subparsers(dest='command')
#hieronder maak een sub-parser voor "report"
report_parser=subparser.add_parser('report')

#hieronder voor "report" DEFINIEER the subcommands voor "inventory","revenue" en "profit"
report_subparsers=report_parser.add_subparsers(dest="report_command") 
inventory_parser = report_subparsers.add_parser("inventory")
revenue_parser = report_subparsers.add_parser("revenue")
profit_parser=report_subparsers.add_parser("profit") 

#hieronder DEFINIEER argument groups voor "report"
report_group=report_parser.add_argument_group("Report options")

#hieronder DEFINEER argument groups for inventory w?yes 
inventory_group=inventory_parser.add_argument_group("Inventory options")
#voeg de argumenten toe aan inventory_group
inventory_group.add_argument("--yesterday",type=str, help="Report inventory for yesterday")
inventory_group.add_argument("--now", type=str, help="Report inventory for today")

#hieronder definieer argument groups voor (report) revenue w? yes 
revenue_group=revenue_parser.add_argument_group("Revenue options")
#voeg de argumenten toe aan revenue_group
revenue_group.add_argument("--yesterday", type=str, help="Report revenue for yesterday")
revenue_group.add_argument("--today",type=str, help="Report revenue for today")
revenue_group.add_argument("--date",type=str, help="Report revenue for specific date(e.g.'2019-12')")

#definieer argument-groups voor (report) profit w? not yet
profit_group=profit_parser.add_argument_group("Profit options")
#voeg de argumenten toe aan profit_group
profit_group.add_argument("--today", type=str, help="Profit of today")

args = parser.parse_args() 
#test input:python main.py report inventory --yesterday 1_Yesterday #w?yes
#test input:python main.py report inventory --now 1_now #w?yes
#print("args.command",args.command)#w?y
#print("args.report_command:",args.report_command)#w?y
#print("args.yesterday",args.yesterday)#w?y
#print("args.now",args.now)#w?y

#test input:python main.py report revenue --yesterday reveneuYesterday #w?
#test input:python main.py report revenue --today revenueToday #w?y
#test input:python main.py report revenue --date revenueDate #w?y
#print("args.command",args.command)#w?y
#print("args.report_command:",args.report_command)#w?y
#print("args.yesterday",args.yesterday)#w?y
#print("args.today",args.today)#w?y
#print("args.date",args.date)#w?y

#test input:python main.py report profit --today profitToday #w?y
#print("args.command:",args.command)#w?y
#print("args.report_command:",args.report_command)#w?y
#print("args.today:",args.today)#w?y

def main():
    pass


if __name__ == "__main__":
    main()

xx endxx
backup 20-10-2023 10.19 u
# Imports
import argparse
import csv
import datetime
from datetime import date
from datetime import datetime
from datetime import timedelta

from functions import date_type
#import datetime

# Do not change these lines.
__winc_id__ = "a2bc36ea784242e4989deb157d527ba0"
__human_name__ = "superpy"


# Your code below this line.

#hieronder :sub-parse:report #w?????
parser=argparse.ArgumentParser(description="Superpy Supermarket Inventory")
#wat de gebruiker als sumcommand heeft ingevulde keuze:buy, sell , report komt als value in attribute command
subparser=parser.add_subparsers(dest='command')
#hieronder maak een sub-parser voor "report"
report_parser=subparser.add_parser('report')

#hieronder voor "report" DEFINIEER the subcommands voor "inventory","revenue" en "profit"
report_subparsers=report_parser.add_subparsers(dest="report_command") 
inventory_parser = report_subparsers.add_parser("inventory")
revenue_parser = report_subparsers.add_parser("revenue")
profit_parser=report_subparsers.add_parser("profit") 

#hieronder DEFINIEER argument groups voor "report"
report_group=report_parser.add_argument_group("Report options")

#hieronder DEFINEER argument groups for inventory w?yes 
inventory_group=inventory_parser.add_argument_group("Inventory options")
#voeg de argumenten toe aan inventory_group
inventory_group.add_argument("--yesterday",type=str, help="Report inventory for yesterday")
inventory_group.add_argument("--now", type=str, help="Report inventory for today")

#hieronder definieer argument groups voor (report) revenue w? yes 
revenue_group=revenue_parser.add_argument_group("Revenue options")
#voeg de argumenten toe aan revenue_group
revenue_group.add_argument("--yesterday", type=str, help="Report revenue for yesterday")
revenue_group.add_argument("--today",type=str, help="Report revenue for today")
revenue_group.add_argument("--date",type=str, help="Report revenue for specific date(e.g.'2019-12')")

#definieer argument-groups voor (report) profit w? not yet
profit_group=profit_parser.add_argument_group("Profit options")
#voeg de argumenten toe aan profit_group
profit_group.add_argument("--today", type=str, help="Profit of today")

args = parser.parse_args() 
#test input:python main.py report inventory --yesterday 1_Yesterday #w?yes
#test input:python main.py report inventory --now 1_now #w?yes
#print("args.command",args.command)#w?y
#print("args.report_command:",args.report_command)#w?y
#print("args.yesterday",args.yesterday)#w?y
#print("args.now",args.now)#w?y

#test input:python main.py report revenue --yesterday reveneuYesterday #w?
#test input:python main.py report revenue --today revenueToday #w?y
#test input:python main.py report revenue --date revenueDate #w?y
#print("args.command",args.command)#w?y
#print("args.report_command:",args.report_command)#w?y
#print("args.yesterday",args.yesterday)#w?y
#print("args.today",args.today)#w?y
#print("args.date",args.date)#w?y

#test input:python main.py report profit --today profitToday #w?y
#print("args.command:",args.command)#w?y
#print("args.report_command:",args.report_command)#w?y
#print("args.today:",args.today)#w?y

def main():
    pass


if __name__ == "__main__":
    main()
xxx end 333
backup 20-12-2023

# Imports
import argparse
import csv
import datetime
from datetime import date
from datetime import datetime
from datetime import timedelta

from functions import date_type
#import datetime

# Do not change these lines.
__winc_id__ = "a2bc36ea784242e4989deb157d527ba0"
__human_name__ = "superpy"


# Your code below this line.

#hieronder :sub-parse:report #w?????
parser=argparse.ArgumentParser(description="Superpy Supermarket Inventory")
#voeg argument toe waar aan?(er is GEEN command en sub-command (b.v. report_command))#works?
parser.add_argument("--advance_time",type=int, help="for advanced time 2 days ,please type:2")
#wat de gebruiker als sumcommand heeft ingevulde keuze:buy, sell , report komt als value in attribute command
subparser=parser.add_subparsers(dest="command")
#hieronder maak een sub-parser voor "buy","sell" and "report"
buy_parser=subparser.add_parser("buy")
sell_parser=subparser.add_parser("sell")
report_parser=subparser.add_parser("report")

#Voor "buy" en "sell" subcommands, definieer specifieke argumenten voor elk
buy_parser.add_argument("--product_name", type=str, help="give the name of the product choice:apple, banana, manderin")
buy_parser.add_argument("--price", type=float, help="give the price of the product for example: 0.5")
buy_parser.add_argument("--expiration_date", type=date_type, help="Enter the expiredate in 'year-month-day'format")

sell_parser.add_argument("--product_name", type=str, help="give the name of the product choice:apple, banana, manderin")
sell_parser.add_argument("--price", type=float, help="give the price of the product for example: 0.7")


#hieronder voor "report" DEFINIEER the subcommands voor "inventory","revenue" en "profit"
report_subparsers=report_parser.add_subparsers(dest="report_command") 
inventory_parser = report_subparsers.add_parser("inventory")
revenue_parser = report_subparsers.add_parser("revenue")
profit_parser=report_subparsers.add_parser("profit") 

#hieronder DEFINIEER argument groups voor "report"
report_group=report_parser.add_argument_group("Report options")

#hieronder DEFINEER argument groups for inventory w?yes 
inventory_group=inventory_parser.add_argument_group("Inventory options")
#voeg de argumenten toe aan inventory_group
inventory_group.add_argument("--yesterday",type=str, help="Report inventory for yesterday")
inventory_group.add_argument("--now", type=str, help="Report inventory for today")

#hieronder definieer argument groups voor (report) revenue w? yes 
revenue_group=revenue_parser.add_argument_group("Revenue options")
#voeg de argumenten toe aan revenue_group
revenue_group.add_argument("--yesterday", type=str, help="Report revenue for yesterday")
revenue_group.add_argument("--today",type=str, help="Report revenue for today")
revenue_group.add_argument("--date",type=str, help="Report revenue for specific date(e.g.'2019-12')")

#definieer argument-groups voor (report) profit w? not yet
profit_group=profit_parser.add_argument_group("Profit options")
#voeg de argumenten toe aan profit_group
profit_group.add_argument("--today", type=str, help="Profit of today")

args = parser.parse_args() 
#test input:python main.py buy --product_name apple --price 0.5 --expiration_date 2023-4-2  #w?yes
#test input:python main.py report inventory --now 1_now #w?yes
#test input:python main.py sell --product_name peer --price 0.1#  #w?y
#test input:python main.py  --product_name peer --price 0.1#  #w?y
#test input:python main.py --advance_time 6 #w? not yet



#print("args.command",args.command)#w?
#print("args.report_command:",args.report_command)#w?y let op geen report_command PRINT by sell and buy want daar is geen report_command
#print("args.product_name",args.product_name)#w?
#print("args.price",args.price)#w?
#print("args.expiration_date",args.expiration_date)#w?
#print("args.advance_time:",args.advance_time )#w?y




def main():
    pass


if __name__ == "__main__":
    main()


